package meucursoJPA.model;

import java.io.Serializable;
import javax.persistence.*;
import java.util.Date;
import java.math.BigInteger;
import java.util.List;


/**
 * The persistent class for the matriculados database table.
 * 
 */
@Entity
@Table(name="matriculados")
@NamedQuery(name="Matriculado.findAll", query="SELECT m FROM Matriculado m")
public class Matriculado implements Serializable {
	private static final long serialVersionUID = 1L;
	private long codigo;
	private Date dataMatricula;
	private BigInteger membroCodigo;
	private List<AlunoAusenteEscolaDominical> alunoAusenteEscolaDominicals;
	private List<AlunosPresenteEscolaDominical> alunosPresenteEscolaDominicals;
	private AulaEscolaDominical aulaEscolaDominical;
	private Classe classe;

	public Matriculado() {
	}


	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	public long getCodigo() {
		return this.codigo;
	}

	public void setCodigo(long codigo) {
		this.codigo = codigo;
	}


	@Temporal(TemporalType.DATE)
	@Column(name="data_matricula")
	public Date getDataMatricula() {
		return this.dataMatricula;
	}

	public void setDataMatricula(Date dataMatricula) {
		this.dataMatricula = dataMatricula;
	}


	@Column(name="membro_codigo")
	public BigInteger getMembroCodigo() {
		return this.membroCodigo;
	}

	public void setMembroCodigo(BigInteger membroCodigo) {
		this.membroCodigo = membroCodigo;
	}


	//bi-directional many-to-one association to AlunoAusenteEscolaDominical
	@OneToMany(mappedBy="matriculado")
	public List<AlunoAusenteEscolaDominical> getAlunoAusenteEscolaDominicals() {
		return this.alunoAusenteEscolaDominicals;
	}

	public void setAlunoAusenteEscolaDominicals(List<AlunoAusenteEscolaDominical> alunoAusenteEscolaDominicals) {
		this.alunoAusenteEscolaDominicals = alunoAusenteEscolaDominicals;
	}

	public AlunoAusenteEscolaDominical addAlunoAusenteEscolaDominical(AlunoAusenteEscolaDominical alunoAusenteEscolaDominical) {
		getAlunoAusenteEscolaDominicals().add(alunoAusenteEscolaDominical);
		alunoAusenteEscolaDominical.setMatriculado(this);

		return alunoAusenteEscolaDominical;
	}

	public AlunoAusenteEscolaDominical removeAlunoAusenteEscolaDominical(AlunoAusenteEscolaDominical alunoAusenteEscolaDominical) {
		getAlunoAusenteEscolaDominicals().remove(alunoAusenteEscolaDominical);
		alunoAusenteEscolaDominical.setMatriculado(null);

		return alunoAusenteEscolaDominical;
	}


	//bi-directional many-to-one association to AlunosPresenteEscolaDominical
	@OneToMany(mappedBy="matriculado")
	public List<AlunosPresenteEscolaDominical> getAlunosPresenteEscolaDominicals() {
		return this.alunosPresenteEscolaDominicals;
	}

	public void setAlunosPresenteEscolaDominicals(List<AlunosPresenteEscolaDominical> alunosPresenteEscolaDominicals) {
		this.alunosPresenteEscolaDominicals = alunosPresenteEscolaDominicals;
	}

	public AlunosPresenteEscolaDominical addAlunosPresenteEscolaDominical(AlunosPresenteEscolaDominical alunosPresenteEscolaDominical) {
		getAlunosPresenteEscolaDominicals().add(alunosPresenteEscolaDominical);
		alunosPresenteEscolaDominical.setMatriculado(this);

		return alunosPresenteEscolaDominical;
	}

	public AlunosPresenteEscolaDominical removeAlunosPresenteEscolaDominical(AlunosPresenteEscolaDominical alunosPresenteEscolaDominical) {
		getAlunosPresenteEscolaDominicals().remove(alunosPresenteEscolaDominical);
		alunosPresenteEscolaDominical.setMatriculado(null);

		return alunosPresenteEscolaDominical;
	}


	//bi-directional many-to-one association to AulaEscolaDominical
	@ManyToOne
	@JoinColumn(name="aula_codigo")
	public AulaEscolaDominical getAulaEscolaDominical() {
		return this.aulaEscolaDominical;
	}

	public void setAulaEscolaDominical(AulaEscolaDominical aulaEscolaDominical) {
		this.aulaEscolaDominical = aulaEscolaDominical;
	}


	//bi-directional many-to-one association to Classe
	@ManyToOne
	public Classe getClasse() {
		return this.classe;
	}

	public void setClasse(Classe classe) {
		this.classe = classe;
	}

}